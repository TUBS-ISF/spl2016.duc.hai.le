import properties.PropertyManager;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class Calendary extends Application{
	
	public HBox addHBox() {
	    HBox hbox = new HBox();
	    hbox.setPadding(new Insets(15, 12, 15, 12));
	    hbox.setSpacing(10);

	    Button buttonCurrent = new Button("Current");
	    buttonCurrent.setPrefSize(100, 20);

	    Button buttonProjected = new Button("Projected");
	    buttonProjected.setPrefSize(100, 20);
	    hbox.getChildren().addAll(buttonCurrent, buttonProjected);

	    return hbox;
	}
	
	
	public void start(Stage primaryStage) {
        
    	primaryStage.setTitle("Calendary v0.1");
        
        Button Days = new Button();
        Days.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                // new Event
            }
        });
        
        Button Months = new Button();
        Days.setOnAction(new EventHandler<ActionEvent>() { 
            @Override
            public void handle(ActionEvent event) {
                // new Event
            }
        });
        Button Weeks = new Button();
        Days.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                // new Event
            }
        });
        Button Years = new Button();
        Days.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                // new Event
            }
        });
        
        
        
        StackPane root = new StackPane();
        root.getChildren().add(Days);
        primaryStage.setScene(new Scene(root, 1200, 600));
        primaryStage.show();
    }
	
	
	public static void main (String[] args) {
		
		// Paper Color
		
		if (PropertyManager.getProperty("BlackWhite")) {
			System.out.println("BlackWhite selected");
		}
		if (PropertyManager.getProperty("WhiteBlack")) {
			System.out.println("WhiteBlack selected");
		}
		if (PropertyManager.getProperty("RedWhite")) {
			System.out.println("RedWhite selected");
		}
		if (PropertyManager.getProperty("WhiteRed")) {
			System.out.println("WhiteRed selected");
		}
		if (PropertyManager.getProperty("BlueWhite")) {
			System.out.println("BlueWhite selected");
		}
		if (PropertyManager.getProperty("WhiteBlue")) {
			System.out.println("WhiteBlue selected");
		}
		
		// Language
		
		if (PropertyManager.getProperty("English")) {
			System.out.println("English selected");
		}
		if (PropertyManager.getProperty("German")) {
			System.out.println("German selected");
		}
		
		// CalendaryExtent
		
		if (PropertyManager.getProperty("Months")) {
			System.out.println("Months selected");
		}
		if (PropertyManager.getProperty("Days")) {
			System.out.println("Days selected");
		}
		if (PropertyManager.getProperty("Weeks")) {
			System.out.println("Weeks selected");
		}
		if (PropertyManager.getProperty("Years")) {
			System.out.println("Years selected");
		}
		
		// ReminderFunction
		
		if (PropertyManager.getProperty("Audio")) {
			System.out.println("Audio selected");
		}
		if (PropertyManager.getProperty("PopUpWindow")) {
			System.out.println("PopUpWindow selected");
		}
		
		// SearchFunction
		
		if (PropertyManager.getProperty("SearchDate")) {
			System.out.println("SearchDate selected");
		}
		if (PropertyManager.getProperty("SearchCalendaryEntries")) {
			System.out.println("SearchCalendaryEntries selected");
		}
		
		// AuthorizedLogin
		
		if (PropertyManager.getProperty("AuthorizedLoginNecessary")) {
			System.out.println("AuthorizedLoginNecessary selected");
		}
		if (PropertyManager.getProperty("NoAuthorizedLogin")) {
			System.out.println("NoAuthorizedLogin selected");
		}
		
        launch(args);
		
	}
}